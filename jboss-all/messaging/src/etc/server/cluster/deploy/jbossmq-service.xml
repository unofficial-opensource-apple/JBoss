<?xml version="1.0" encoding="UTF-8"?>

<!-- ===================================================================== -->
<!--                                                                       -->
<!--  JBoss Server Configuration                                           -->
<!--                                                                       -->
<!-- ===================================================================== -->

<!-- $Id: jbossmq-service.xml,v 1.2 2002/05/26 23:38:54 user57 Exp $ -->

<!--
   |  This contains the cluster configuration of jbossmq
 -->
<server>


  <!--classpath codebase="lib/ext" archives="
    jbossmq.jar,
	jbossmqha.jar,
	jbossha.jar
      "/-->

  <!-- ==================================================================== -->
  <!-- JBossMQ                                                              -->
  <!-- ==================================================================== -->

  <mbean code="org.jboss.mq.server.JBossMQService"
	 name="jboss.mq:service=Server">
    <depends optional-attribute-name="PersistenceManager">jboss.mq:service=PersistenceManager</depends>
    <depends optional-attribute-name="StateManager">jboss.mq:service=StateManager</depends>
  </mbean>

  <!--
     | The MessageCache decides where to put JBossMQ message that
     | are sitting around waiting to be consumed by a client.
     |
     | The memory marks are in Megabytes.  Once the JVM memory usage hits
     | the high memory mark, the old messages in the cache will start getting
     | stored in the DataDirectory.  As memory usage gets closer to the
     | Max memory mark, the amount of message kept in the memory cache aproaches 0.
   -->
  <mbean code="org.jboss.mq.server.MessageCache"
	 name="jboss.mq:service=MessageCache">
    <attribute name="HighMemoryMark">500</attribute>
    <attribute name="MaxMemoryMark">600</attribute>
    <attribute name="DataDirectory">tmp/jbossmq</attribute>
  </mbean>

  <!--
     | The StateManager is used to keep JMS persistent state data.
     | For example: what durable subscriptions are active.
   -->
  <mbean code="org.jboss.mq.server.StateManager"
	 name="jboss.mq:service=StateManager">
    <attribute name="StateFile">conf/default/jbossmq-state.xml</attribute>
  </mbean>

  <!-- The PersistenceManager is used to store messages to disk. -->
  <mbean code="org.jboss.mq.pm.file.PersistenceManager"
	 name="jboss.mq:service=PersistenceManager">
    <attribute name="DataDirectory">data/jbossmq/file/</attribute>
    <depends optional-attribute-name="MessageCache">jboss.mq:service=MessageCache</depends>
  </mbean>

  <!--
  A JDBC PersistenceManager.
  The "DataSource" reference should refer to your datasource
  configuration name. The datasource should have autocommit ON for the
  JDBC PM to work properly. The supplied Hypersonic SQL datasource
  NoTransDS is configured with that in mind. (See
  hsqldb-default-service.xml for details)

  The two attributes, TransactionTableName and MessageTableName, are
  optional. Their default values are "jms_transaction" and
  "jms_messages" respectively. There is no need to create these tables
  manually, they will be created automatically for you if they are not
  found. If that doesn't work for you, you can try the following SQL
  setup script (HypersonicSQL):

  CREATE TABLE JMS_MESSAGES
  (
    MESSAGEID CHAR(32) NOT NULL,
    DESTINATION VARCHAR(32) NOT NULL,
    MESSAGEBLOB OBJECT,
    PRIMARY KEY (MESSAGEID, DESTINATION)
  );
  CREATE INDEX JMS_MESSAGES_DEST ON JMS_MESSAGES(DESTINATION);

  CREATE TABLE JMS_TRANSACTIONS
  (
    ID CHAR(32)
  )
  -->

  <!--
  <mbean code="org.jboss.mq.pm.jdbc.PersistenceManager"
	 name="jboss.mq:service=PersistenceManager">
    <depends optional-attribute-name="DataSource">jboss.mq:service=ConnectionFactoryLoader,name=NoTransDS</depends>
    <depends optional-attribute-name="MessageCache">jboss.mq:service=MessageCache</depends>
    <attribute name="TransactionTableName">jms_transaction</attribute>
    <attribute name="MessageTableName">jms_messages</attribute>
  </mbean>
  -->

  <!--
     | InvocationLayers are the different transport methods that can
     | be used to access the server.
   -->
  <mbean code="org.jboss.mq.il.ha.HAServerILService"
	 name="jboss.mq:service=InvocationLayer,type=HA">
    <depends optional-attribute-name="JBossMQService">jboss.mq:service=Server</depends>
    <attribute name="ConnectionFactoryJNDIRef">ConnectionFactory</attribute>
    <attribute name="XAConnectionFactoryJNDIRef">XAConnectionFactory</attribute>
    <attribute name="PartitionName">DefaultPartition</attribute>
    <attribute name="LoadBalancePolicy">org.jboss.ha.framework.interfaces.FirstAvailable</attribute>
    <attribute name="PingPeriod">5000</attribute>
  </mbean>

  <mbean code="org.jboss.mq.il.jvm.JVMServerILService"
	 name="jboss.mq:service=InvocationLayer,type=JVM">
    <depends optional-attribute-name="JBossMQService">jboss.mq:service=Server</depends>
    <attribute name="ConnectionFactoryJNDIRef">java:/ConnectionFactory</attribute>
    <attribute name="XAConnectionFactoryJNDIRef">java:/XAConnectionFactory</attribute>
    <attribute name="PingPeriod">0</attribute>
  </mbean>

  <mbean code="org.jboss.mq.il.oil.OILServerILService"
	 name="jboss.mq:service=InvocationLayer,type=OIL">
    <depends optional-attribute-name="JBossMQService">jboss.mq:service=Server</depends>
    <attribute name="ConnectionFactoryJNDIRef">OILConnectionFactory</attribute>
    <attribute name="XAConnectionFactoryJNDIRef">OILXAConnectionFactory</attribute>
    <attribute name="ServerBindPort">8090</attribute>
    <attribute name="PingPeriod">60000</attribute>
  </mbean>

  <mbean code="org.jboss.mq.il.uil.UILServerILService"
	 name="jboss.mq:service=InvocationLayer,type=UIL">
    <depends optional-attribute-name="JBossMQService">jboss.mq:service=Server</depends>
    <attribute name="ConnectionFactoryJNDIRef">UILConnectionFactory</attribute>
    <attribute name="XAConnectionFactoryJNDIRef">UILXAConnectionFactory</attribute>
    <attribute name="ServerBindPort">8091</attribute>
    <attribute name="PingPeriod">60000</attribute>
  </mbean>

  <!--
     | The following three line create 3 topics named:
     |
     |   testTopic, example, bob
   -->
  <mbean code="org.jboss.mq.server.TopicManager"
	 name="jboss.mq.destination:service=Topic,name=testTopic">
    <depends optional-attribute-name="JBossMQService">jboss.mq:service=Server</depends>
  </mbean>
  <mbean code="org.jboss.mq.server.TopicManager"
	 name="jboss.mq.destination:service=Topic,name=example">
    <depends optional-attribute-name="JBossMQService">jboss.mq:service=Server</depends>
  </mbean>
  <mbean code="org.jboss.mq.server.TopicManager"
	 name="jboss.mq.destination:service=Topic,name=bob">
    <depends optional-attribute-name="JBossMQService">jboss.mq:service=Server</depends>
  </mbean>

  <!--
     | The following 9 line create 9 topics named:
     |
     |   testQueue, controlQueue, A, B, C, D, E, F, ex
   -->
  <mbean code="org.jboss.mq.server.QueueManager"
	 name="jboss.mq.destination:service=Queue,name=testQueue">
    <depends optional-attribute-name="JBossMQService">jboss.mq:service=Server</depends>
  </mbean>
  <mbean code="org.jboss.mq.server.QueueManager"
	 name="name="jboss.mq.destination:service=Queue,name=controlQueue">
    <depends optional-attribute-name="JBossMQService">jboss.mq:service=Server</depends>
  </mbean>
  <mbean code="org.jboss.mq.server.QueueManager"
	 name="jboss.mq.destination:service=Queue,name=A">
    <depends optional-attribute-name="JBossMQService">jboss.mq:service=Server</depends>
  </mbean>
  <mbean code="org.jboss.mq.server.QueueManager"
	 name="jboss.mq.destination:service=Queue,name=B">
    <depends optional-attribute-name="JBossMQService">jboss.mq:service=Server</depends>
  </mbean>
  <mbean code="org.jboss.mq.server.QueueManager"
	 name="jboss.mq.destination:service=Queue,name=C">
    <depends optional-attribute-name="JBossMQService">jboss.mq:service=Server</depends>
  </mbean>
  <mbean code="org.jboss.mq.server.QueueManager"
	 name="jboss.mq.destination:service=Queue,name=D">
    <depends optional-attribute-name="JBossMQService">jboss.mq:service=Server</depends>
  </mbean>
  <mbean code="org.jboss.mq.server.QueueManager"
	 name="jboss.mq.destination:service=Queue,name=E">
    <depends optional-attribute-name="JBossMQService">jboss.mq:service=Server</depends>
  </mbean>
  <mbean code="org.jboss.mq.server.QueueManager"
	 name="jboss.mq.destination:service=Queue,name=F">
    <depends optional-attribute-name="JBossMQService">jboss.mq:service=Server</depends>
  </mbean>
  <mbean code="org.jboss.mq.server.QueueManager"
	 name="jboss.mq.destination:service=Queue,name=ex">
    <depends optional-attribute-name="JBossMQService">jboss.mq:service=Server</depends>
  </mbean>
  <mbean code="org.jboss.mq.server.QueueManager"
	 name="jboss.mq.destination:service=Queue,name=DLQ">
    <depends optional-attribute-name="JBossMQService">jboss.mq:service=Server</depends>
  </mbean>

</server>
