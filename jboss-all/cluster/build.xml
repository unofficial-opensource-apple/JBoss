<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [
   <!ENTITY buildmagic SYSTEM "../tools/etc/buildmagic/buildmagic.ent">
]>

<!-- ====================================================================== -->
<!--                                                                        -->
<!--  JBoss, the OpenSource J2EE webOS                                      -->
<!--                                                                        -->
<!--  Distributable under LGPL license.                                     -->
<!--  See terms of license at http://www.gnu.org.                           -->
<!--                                                                        -->
<!-- ====================================================================== -->

<!-- $Id: build.xml,v 1.39.2.7 2003/07/05 23:52:37 ivelin Exp $ -->

<project default="main" name="JBoss/Cluster">

  <!-- ================================================================== -->
  <!-- Setup                                                              -->
  <!-- ================================================================== -->

  <!--
     | Include the common Buildmagic elements.
     |
     | This defines several different targets, properties and paths.
     | It also sets up the basic extention tasks amoung other things.
   -->

  &buildmagic;


  <!-- ================================================================== -->
  <!-- Initialization                                                     -->
  <!-- ================================================================== -->

  <!--
     | Initialize the build system.  Must depend on '_buildmagic:init'.
     | Other targets should depend on 'init' or things will mysteriously fail.
   -->

  <target name="init" unless="init.disable" depends="_buildmagic:init">
  </target>


  <!-- ================================================================== -->
  <!-- Configuration                                                      -->
  <!-- ================================================================== -->

  <!--
     | Configure the build system.
     |
     | This target is invoked by the Buildmagic initialization logic and
     | should contain module specific configuration elements.
   -->

  <target name="configure" unless="configure.disable">

    <!-- =================== -->
    <!-- Basic Configuration -->
    <!-- =================== -->

    <!-- Module name(s) & version -->
    <property name="module.name" value="cluster"/>
    <property name="module.Name" value="JBoss Cluster"/>
    <property name="module.version" value="DEV"/>

    <!-- ========= -->
    <!-- Libraries -->
    <!-- ========= -->

    <!-- Java Secure Socket Extension (JSSE) -->
    <property name="sun.jsse.root" value="${project.thirdparty}/sun/jsse"/>
    <property name="sun.jsse.lib" value="${sun.jsse.root}/lib"/>
    <path id="sun.jsse.classpath">
      <fileset dir="${sun.jsse.lib}">
        <include name="**/*.jar"/>
      </fileset>
    </path>

    <!-- Apache Crimson (XML/DOM) -->
    <property name="apache.crimson.root" value="${project.thirdparty}/apache/crimson"/>
    <property name="apache.crimson.lib" value="${apache.crimson.root}/lib"/>
    <path id="apache.crimson.classpath">
      <pathelement path="${apache.crimson.lib}/crimson.jar"/>
    </path>

    <!-- Apache Commons -->
    <property name="apache.commons.root" value="${project.thirdparty}/apache/commons"/>
    <property name="apache.commons.lib" value="${apache.commons.root}/lib"/>
    <path id="apache.commons.classpath">
      <pathelement path="${apache.commons.lib}/commons-collections.jar"/>
      <pathelement path="${apache.commons.lib}/commons-logging.jar"/>
    </path>

    <!-- Log4j -->
    <property name="apache.log4j.root" value="${project.thirdparty}/apache/log4j"/>
    <property name="apache.log4j.lib" value="${apache.log4j.root}/lib"/>
    <path id="apache.log4j.classpath">
      <pathelement path="${apache.log4j.lib}/log4j.jar"/>
    </path>

    <!-- JUnit -->
    <property name="junit.junit.root" value="${project.thirdparty}/junit/junit"/>
    <property name="junit.junit.lib" value="${junit.junit.root}/lib"/>
    <path id="junit.junit.classpath">
      <pathelement path="${junit.junit.lib}/junit.jar"/>
    </path>

    <!-- JavaGroups -->
    <property name="javagroups.javagroups.root" value="${project.thirdparty}/javagroups/javagroups"/>
    <property name="javagroups.javagroups.lib" value="${javagroups.javagroups.root}/lib"/>
    <path id="javagroups.javagroups.classpath">
      <pathelement path="${javagroups.javagroups.lib}/javagroups-2.0.jar"/>
    </path>

    <!-- Servlet Specification -->
    <property name="sun.servlet.root" value="${project.thirdparty}/sun/servlet"/>
    <property name="sun.servlet.lib" value="${sun.servlet.root}/lib"/>
    <path id="sun.servlet.classpath">
      <pathelement path="${sun.servlet.lib}/servlet.jar"/>
    </path>

    <!-- Concurrent Libs -->
    <property name="oswego.concurrent.root" value="${project.thirdparty}/oswego/concurrent"/>
    <property name="oswego.concurrent.lib" value="${oswego.concurrent.root}/lib"/>
    <path id="oswego.concurrent.classpath">
      <pathelement path="${oswego.concurrent.lib}/concurrent.jar"/>
    </path>

    <!-- The combined library classpath -->
    <path id="library.classpath">
      <path refid="sun.jsse.classpath"/>
      <path refid="apache.crimson.classpath"/>
      <path refid="apache.log4j.classpath"/>
      <path refid="apache.commons.classpath"/>
      <path refid="junit.junit.classpath"/>
      <path refid="javagroups.javagroups.classpath"/>
      <path refid="sun.servlet.classpath"/>
      <path refid="oswego.concurrent.classpath"/>
    </path>

    <!-- ======= -->
    <!-- Modules -->
    <!-- ======= -->

    <!-- J2EE -->
    <property name="jboss.j2ee.root" value="${project.root}/j2ee/output"/>
    <property name="jboss.j2ee.lib" value="${jboss.j2ee.root}/lib"/>
    <path id="jboss.j2ee.classpath">
      <pathelement path="${jboss.j2ee.lib}/jboss-j2ee.jar"/>
    </path>

    <!-- Common -->
    <property name="jboss.common.root" value="${project.root}/common/output"/>
    <property name="jboss.common.lib" value="${jboss.common.root}/lib"/>
    <path id="jboss.common.classpath">
      <pathelement path="${jboss.common.lib}/jboss-common.jar"/>
    </path>

    <!-- System -->
    <property name="jboss.system.root" value="${project.root}/system/output"/>
    <property name="jboss.system.lib" value="${jboss.system.root}/lib"/>
    <path id="jboss.system.classpath">
      <pathelement path="${jboss.system.lib}/jboss-system.jar"/>
    </path>

    <!-- Naming -->
    <property name="jboss.naming.root" value="${project.root}/naming/output"/>
    <property name="jboss.naming.lib" value="${jboss.naming.root}/lib"/>
    <path id="jboss.naming.classpath">
      <pathelement path="${jboss.naming.lib}/jnpserver.jar"/>
    </path>

    <!-- Messaging -->
    <property name="jboss.messaging.root" value="${project.root}/messaging/output"/>
    <property name="jboss.messaging.lib" value="${jboss.messaging.root}/lib"/>
    <path id="jboss.messaging.classpath">
      <pathelement path="${jboss.messaging.lib}/jbossmq.jar"/>
    </path>

    <!-- Server -->
    <property name="jboss.server.root" value="${project.root}/server/output"/>
    <property name="jboss.server.lib" value="${jboss.server.root}/lib"/>
    <path id="jboss.server.classpath">
      <pathelement path="${jboss.server.lib}/jboss.jar"/>
    </path>

    <!-- JMX -->
    <property name="jboss.jmx.root" value="${project.root}/jmx/output"/>
    <property name="jboss.jmx.lib" value="${jboss.jmx.root}/lib"/>
    <path id="jboss.jmx.classpath">
      <pathelement path="${jboss.jmx.lib}/jboss-jmx.jar"/>
    </path>

    <!-- Security -->
    <property name="jboss.security.root" value="${project.root}/security/output"/>
    <property name="jboss.security.lib" value="${jboss.security.root}/lib"/>
    <path id="jboss.security.classpath">
      <pathelement path="${jboss.security.lib}/jaas.jar"/>
    </path>

    <!-- Transaction -->
    <property name="jboss.transaction.root" value="${project.root}/transaction/output"/>
    <property name="jboss.transaction.lib" value="${jboss.transaction.root}/lib"/>
    <path id="jboss.transaction.classpath">
      <pathelement path="${jboss.transaction.lib}/jboss-transaction.jar"/>
    </path>

    <!-- The combined dependent module classpath -->
    <path id="dependentmodule.classpath">
      <path refid="jboss.j2ee.classpath"/>
      <path refid="jboss.common.classpath"/>
      <path refid="jboss.system.classpath"/>
      <path refid="jboss.naming.classpath"/>
      <path refid="jboss.messaging.classpath"/>
      <path refid="jboss.server.classpath"/>
      <path refid="jboss.security.classpath"/>
      <path refid="jboss.jmx.classpath"/>
      <path refid="jboss.transaction.classpath"/>
    </path>

    <!-- ===== -->
    <!-- Tasks -->
    <!-- ===== -->

    <!-- Where source files live -->
    <property name="source.java" value="${module.source}/main"/>
    <property name="source.etc" value="${module.source}/etc"/>
    <property name="source.examples" value="${module.source}/examples"/>
    <property name="source.resources" value="${module.source}/resources"/>

    <!-- Where build generated files will go -->
    <property name="build.classes" value="${module.output}/classes"/>
    <property name="build.gen-src" value="${module.output}/gen-src"/>
    <property name="build.lib" value="${module.output}/lib"/>
    <property name="build.api" value="${module.output}/api"/>
    <property name="build.etc" value="${module.output}/etc"/>
    <property name="build.examples" value="${module.output}/examples"/>
    <property name="build.reports" value="${module.output}/reports"/>

    <!-- Install/Release structure -->
    <property name="install.id" value="${module.name}-${module.version}"/>
    <property name="release.id" value="${install.id}"/>
    <property name="install.root" value="${module.output}/${install.id}"/>

    <!-- The combined thirdparty classpath -->
    <path id="thirdparty.classpath">
      <path refid="library.classpath"/>
      <path refid="dependentmodule.classpath"/>
    </path>

    <!-- This module is based on Java 1.2 -->
    <property name="javac.target" value="1.2"/>

    <!-- RMIC should generate stubs compatible with Java 1.2+ -->
    <property name="rmic.stubVersion" value="1.2"/>

    <!-- classpath and local.classpath must have a value using with a path -->
    <property name="classpath" value=""/>
    <property name="local.classpath" value=""/>

    <!-- The classpath required to build classes. -->
    <path id="javac.classpath">
      <pathelement path="${classpath}"/>
      <pathelement path="${local.classpath}"/>
      <path refid="thirdparty.classpath"/>
    </path>

    <!-- The classpath required to build javadocs. -->
    <path id="javadoc.classpath">
      <path refid="javac.classpath"/>
    </path>

    <!-- Packages to include when generating api documentation -->
    <property name="javadoc.packages" value="org.jboss.*"/>

    <!-- Override JUnit defaults -->
    <property name="junit.timeout" value="240000"/> <!-- 4 minutes -->
    <property name="junit.batchtest.todir" value="${build.reports}"/>
    <property name="junit.jvm.options" value="-Ddummy"/>

    <!-- xdoclet -->
    <path id="xdoclet.task.classpath">
      <path refid="javac.classpath"/>
      <fileset dir="${project.thirdparty}/xdoclet/xdoclet/lib">
        <include name="**/*.jar"/>
      </fileset>
    </path>
    <property name="xdoclet.task.classpath" 
	      refid="xdoclet.task.classpath"/>

    <taskdef name="todo" 
             classname="xdoclet.modules.doc.DocumentDocletTask"
             classpathref="xdoclet.task.classpath"/>
  </target>


  <!-- ================================================================== -->
  <!-- Compile                                                            -->
  <!-- ================================================================== -->

  <!--
     |  Compile everything.
     |
     |  This target should depend on other compile-* targets for each
     |  different type of compile that needs to be performed, short of
     |  documentation compiles.
    -->
  <target name="compile"
	  description="Compile all source files."
	  depends="compile-classes,
                   compile-rmi,
                   compile-etc"/>

  <!-- Compile all class files -->
  <target name="compile-classes" depends="init">
    <mkdir dir="${build.classes}"/>

    <taskdef name="jmxdoclet" classname="xdoclet.modules.jmx.JMXDocletTask" classpathref="xdoclet.task.classpath"/>

    <mkdir dir="${build.gen-src}"/>
    <jmxdoclet
	     destdir="${build.gen-src}"
	     excludedtags="@version,@author"
    >
      <fileset dir="${source.java}">
        <include name="org/jboss/ha/framework/server/*.java"/>
      </fileset>
      <mbeaninterface/>
    </jmxdoclet>

    <javac destdir="${build.classes}"
           optimize="${javac.optimize}"
	   target="${javac.target}"
           debug="${javac.debug}"
	   depend="${javac.depend}"
	   verbose="${javac.verbose}"
	   deprecation="${javac.deprecation}"
	   includeAntRuntime="${javac.include.ant.runtime}"
	   includeJavaRuntime="${javac.include.java.runtime}"
	   failonerror="${javac.fail.onerror}">
       <src path="${source.java}"/>
       <src path="${build.gen-src}"/>
       <src path="${source.examples}"/>
       <classpath refid="javac.classpath"/>
       <include name="${javac.includes}"/>
       <exclude name="${javac.excludes}"/>

       <!-- Having some issues with this (old xml parser api?) -->
       <exclude name="org/jbossmx/**"/>
       <!--exclude name="org/jboss/ha/httpsession/**"/-->
    </javac>
  </target>

  <!-- Compile RMI stubs -->
  <target name="compile-rmi" depends="compile-classes">
    <rmic base="${build.classes}"
	  verify="${rmic.verify}"
	  iiop="${rmic.iiop}"
	  iiopopts="${rmic.iiopops}"
	  idl="${rmic.idl}"
	  idlopts="${rmic.idlops}"
	  debug="${rmic.debug}"
          stubVersion="${rmic.stubVersion}">
      <classpath refid="javac.classpath"/>
      <include name="${rmic.includes}"/>
      <exclude name="${rmic.excludes}"/>

      <include name="org/jboss/ha/framework/server/DistributedReplicantManagerImpl.class"/>
      <include name="org/jboss/ha/framework/server/DistributedStateImpl.class"/>
      <include name="org/jboss/ha/jndi/HAJNDI.class"/>
      <include name="org/jboss/ha/framework/server/HARMIServerImpl.class"/>
      <include name="org/jboss/mq/il/ha/HAClientIL.class"/>
      <include name="org/jboss/mq/il/ha/HAServerIL.class"/>
    </rmic>
  </target>

  <!-- Compile manifests -->
  <target name="compile-etc" depends="init">
    <mkdir dir="${build.etc}"/>
    <copy todir="${build.etc}" filtering="yes">
      <fileset dir="${source.etc}">
         <include name="**"/>
      </fileset>
    </copy>
  </target>


  <!-- ================================================================== -->
  <!-- Archives                                                           -->
  <!-- ================================================================== -->

  <!--
     |  Build all jar files.
    -->
  <target name="jars" depends="compile" description="Builds all jar files.">
    <mkdir dir="${build.lib}"/>

    <!-- Build the jbossha.jar -->
    <!-- 
    	since the examples are just a few small files,
    	for now they are bundled with the main jar
    	to reduce file explosion
    -->    
    <jar jarfile="${build.lib}/jbossha.jar"
	 manifest="${build.etc}/default.mf">
      <fileset dir="${build.classes}">
        <include name="**"/>
        <exclude name="org/jbossmx/**"/>
        <include name="org/jboss/ha/httpsession/interfaces/*"/>
        <exclude name="org/jboss/ha/httpsession/server/**"/>
        <exclude name="org/jboss/ha/httpsession/beanimpl/**"/>
      </fileset>
    </jar>

    <!-- Build the jbossha-client.jar -->
    <jar jarfile="${build.lib}/jbossha-client.jar"
	 manifest="${build.etc}/default.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/ha/framework/interfaces/**"/>
        <include name="org/jboss/ha/hasessionstate/interfaces/**"/>
        <include name="org/jboss/invocation/jrmp/interfaces/**"/>
        <include name="org/jboss/invocation/http/interfaces/**"/>
        <include name="org/jboss/invocation/InvokerProxyHA**"/>
        <include name="org/jboss/ha/**/*Stub.class"/>
        <include name="org/jboss/ha/framework/test/ExplicitFailoverClientInterceptor.class"/>
        <exclude name="org/jbossmx/**"/>
      </fileset>
    </jar>

    <!-- Build the jbossmqha.jar -->
    <jar jarfile="${build.lib}/jbossmqha.jar"
	 manifest="${build.etc}/default.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/mq/il/ha/**"/>
      </fileset>
    </jar>

    <!-- Build the ClusteredHttpSessionEB.jar -->
    <jar jarfile="${build.lib}/ClusteredHttpSessionEB.jar"
	 manifest="${build.etc}/default.mf">
      <fileset dir="${build.classes}">
        <include name="org/jboss/ha/httpsession/beanimpl/interfaces/**"/>
        <include name="org/jboss/ha/httpsession/beanimpl/ejb/**"/>
      </fileset>
      <fileset dir="${source.resources}/ClusteredHTTPSessionBean">
        <include name="META-INF/**"/>
      </fileset>
    </jar>

    <!-- Build the jbossha-httpsession.sar -->
    <jar jarfile="${build.lib}/jbossha-httpsession.sar"
	 manifest="${build.etc}/default.mf">
      <fileset dir="${build.lib}">
        <include name="ClusteredHttpSessionEB.jar"/>
      </fileset>
      <fileset dir="${build.classes}">
        <include name="org/jboss/ha/httpsession/beanimpl/interfaces/**"/>
        <include name="org/jboss/ha/httpsession/server/**"/>
      </fileset>
      <fileset dir="${source.resources}/ClusteredHTTPSessionService">
        <include name="**"/>
      </fileset>
    </jar>

  </target>

  <!-- Generate examples files -->

  <!-- Should really place these in a package, compile, then include source -->
  <target name="docs-examples" depends="init">
    <mkdir dir="${build.examples}"/>
    <copy todir="${build.examples}" filtering="yes">
      <fileset dir="${source.examples}">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- ================================================================== -->
  <!-- Install & Release                                                  -->
  <!-- ================================================================== -->

  <target name="install"
	  description="Install the structure for a release."
	  depends="all, _buildmagic:install:default"/>

  <target name="release" depends="install"/>

  <target name="release-zip"
	  description="Builds a ZIP distribution."
	  depends="release, _buildmagic:release:zip"/>

  <target name="release-tar"
	  description="Builds a TAR distribution."
	  depends="release, _buildmagic:release:tar"/>

  <target name="release-tgz"
	  description="Builds a TAR-GZ distribution."
	  depends="release, _buildmagic:release:tgz"/>

  <target name="release-all"
	  description="Builds a distribution for each archive type."
	  depends="release-zip, release-tgz"/>


  <!-- ================================================================== -->
  <!-- Cleaning                                                           -->
  <!-- ================================================================== -->

  <!-- Clean up all build output -->
  <target name="clean"
	  description="Cleans up most generated files."
	  depends="_buildmagic:clean">
  </target>

  <!-- Clean up all generated files -->
  <target name="clobber"
	  description="Cleans up all generated files."
	  depends="_buildmagic:clobber, clean">
  </target>


  <!-- ================================================================== -->
  <!-- Misc.                                                              -->
  <!-- ================================================================== -->

  <target name="main"
	  description="Executes the default target (most)."
	  depends="most"/>

  <target name="all"
	  description="Builds everything."
	  depends="jars, docs"/>

  <target name="most"
	  description="Builds almost everything."
	  depends="jars"/>

  <target name="help"
          description="Show this help message."
	  depends="_buildmagic:help:standard"/>

</project>
