/* * JBoss, the OpenSource J2EE webOS * * Distributable under LGPL license. * See terms of license at gnu.org. */package org.jboss.net.uddi.registration;import org.jboss.net.uddi.UDDIRegistrationException;import org.jboss.net.uddi.entities.BusinessService;import org.jboss.logging.Logger;import java.net.MalformedURLException;import java.util.Vector;import org.uddi4j.*;import org.uddi4j.client.*;import org.uddi4j.datatype.*;import org.uddi4j.datatype.binding.*;import org.uddi4j.datatype.business.*;import org.uddi4j.datatype.service.*;import org.uddi4j.transport.TransportException;import org.uddi4j.request.*;import org.uddi4j.response.*;import org.uddi4j.util.*;import org.w3c.dom.*;import javax.xml.parsers.*;import java.io.*;/** * This class acts as the access point to register Web Services * with a UDDI instance during the deployment of a JBOSS web * service.  It only supports the subset of publish APIs required to  * deploy a web service. * @author pbraswell * @since June 2002 * @version $Revision: 1.1.1.1.2.1 $ */public class UDDI4JRegistryProxy implements IUDDIRegistryProxy {   public UDDI4JRegistryProxy() {   }   public UDDI4JRegistryProxy(String publishURL) {      this.publishURL=publishURL;   }   public UDDI4JRegistryProxy(      String publishURL,      String userName,      String password) {      this.userName= userName;      this.password= password;      this.publishURL= publishURL;   }   /*** Getters/Setters ***/   public String getUserName() {      return userName;   }   public void setUserName(String userName) {      this.userName= userName;   }   public String getPassword() {      return this.password;   }   public void setPassword(String password) {      this.password= password;   }   public String getPublishURL() {      return this.publishURL;   }   public void setPublishURL(String publishURL) {      this.publishURL= publishURL;   }   public void saveBusinessService(BusinessService bs)      throws UDDIRegistrationException {      // Preconditions URL, username and password not null.      if ((userName == null) || (password == null) || (publishURL == null))         throw new UDDIRegistrationException(            "userName, password or publishURL is"               + "null, valid entries are required for all these fields");      try {         UDDIProxy proxy= new UDDIProxy();         proxy.setPublishURL(publishURL);         log.info(            "logging into publish URL: [" + userName + "/" + password + "]");         // Pass in userid and password registered at the UDDI site         AuthToken token= proxy.get_authToken(userName, password);         BindingTemplates bindingTemplates= new BindingTemplates();         org.uddi4j.datatype.service.BusinessService businessService=            new org.uddi4j.datatype.service.BusinessService(               "",               bs.getName(),               bindingTemplates);         businessService.setBusinessKey(bs.getBusinessKey());         Vector services= new Vector();         services.addElement(businessService);         // **** First save a Business Service         ServiceDetail serviceDetail=            proxy.save_service(token.getAuthInfoString(), services);         // Process returned ServiceDetail object to list the         // saved services.         Vector businessServices= serviceDetail.getBusinessServiceVector();         org.uddi4j.datatype.service.BusinessService businessServiceReturned=            (org               .uddi4j               .datatype               .service               .BusinessService) (businessServices               .elementAt(0));         String serviceKey= businessServiceReturned.getServiceKey();         log.info("saved : " + businessServiceReturned.getDefaultNameString());         log.info(            "returned service key : "               + businessServiceReturned.getServiceKey());      } catch (UDDIException e) {         DispositionReport dr= e.getDispositionReport();         if (dr != null) {            log.error(               "UDDIException faultCode:"                  + e.getFaultCode()                  + "\n operator:"                  + dr.getOperator()                  + "\n generic:"                  + dr.getGeneric()                  + "\n errno:"                  + dr.getErrno()                  + "\n errCode:"                  + dr.getErrCode()                  + "\n errInfoText:"                  + dr.getErrInfoText());         }      } catch (TransportException tex) {         log.error("Transport exception: " + tex.toString());      } catch (MalformedURLException murlex) {         log.error(            "Malformed exception error: " + publishURL + murlex.toString());      }   }   /*** Member Variables ***/   private String userName;   private String password;   private String publishURL;   protected static final Logger log=      Logger.getLogger(UDDI4JRegistryProxy.class);}