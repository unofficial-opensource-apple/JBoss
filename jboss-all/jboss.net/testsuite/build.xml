<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [
  <!ENTITY buildmagic SYSTEM "resource://org/jboss/tools/buildmagic/common.xml">
]>

<!-- ====================================================================== -->
<!--                                                                        -->
<!--  JBoss, the OpenSource J2EE webOS                                      -->
<!--                                                                        -->
<!--  Distributable under LGPL license.                                     -->
<!--  See terms of license at http://www.gnu.org.                           -->
<!--                                                                        -->
<!-- ====================================================================== -->

<!-- $Id: build.xml,v 1.19.2.5 2003/04/09 06:59:23 cgjung Exp $ -->

<project default="main" name="JBoss/JBoss.net/TestSuite">

  <!-- ================================================================== -->
  <!-- Setup                                                              -->
  <!-- ================================================================== -->

  <!--
     | Include the common Buildmagic elements.
     |
     | This defines several different targets, properties and paths.
     | It also sets up the basic extention tasks amoung other things.
   -->

  &buildmagic;


  <!-- ================================================================== -->
  <!-- Initialization                                                     -->
  <!-- ================================================================== -->

  <!--
     | Initialize the build system.  Must depend on '_buildmagic:init'.  
     | Other targets should depend on 'init' or things will mysteriously fail.
   -->

  <target name="init" unless="init.disable" depends="_buildmagic:init">
  </target>


  <!-- ================================================================== -->
  <!-- Configuration                                                      -->
  <!-- ================================================================== -->

  <!--
     | Configure the build system.  
     |
     | This target is invoked by the Buildmagic initialization logic and 
     | should contain module specific configuration elements.
   -->

  <target name="configure" unless="configure.disable">
    <!-- Module name(s) & version -->
    <property name="module.name" value="jboss-net-testsuite"/>
    <property name="module.Name" value="JBoss.net TestSuite"/>
    <property name="module.version" value="unspecified"/>

    <!-- Invoke the rest of the configuration targets -->
    <call target="_configure-tools"/>
    <call target="_configure-libraries"/>
    <call target="_configure-modules"/>
    <call target="_configure-tasks"/>

    <!-- Load common task properties -->
    <property resource="org/jboss/tools/buildmagic/task.properties"/>
  </target>

  <!-- Configure the thirdparty tools required to build this module. -->
  <target name="_configure-tools" unless="configure-tools.disable">
    <!-- No non-standard tools are required for this module. -->
  </target>

  <!-- Configure the thirdparty libraries required by this module. -->
  <target name="_configure-libraries" unless="configure-libraries.disable">

    <property name="project.thirdparty.local" value="${project.root}/../thirdparty"/>

    <!-- Java Naming and Directory Interface (JNDI) -->
    <property name="sun.jndi.root" value="${project.thirdparty.local}/sun/jndi"/>
    <property name="sun.jndi.lib" value="${sun.jndi.root}/lib"/>
    <path id="sun.jndi.classpath">
      <pathelement path="${sun.jndi.lib}/jndi.jar"/>
    </path>

    <!-- Java API for XML Processing (JAXP) -->
    <property name="sun.jaxp.root" value="${project.thirdparty.local}/sun/jaxp"/>
    <property name="sun.jaxp.lib" value="${sun.jaxp.root}/lib"/>
    <path id="sun.jaxp.classpath">
      <pathelement path="${sun.jaxp.lib}/jaxp.jar"/>
      <pathelement path="${sun.jaxp.lib}/crimson.jar"/>
    </path>

    <!-- Java Socket Extensions -->
    <property name="sun.jsse.root" value="${project.thirdparty.local}/sun/jsse"/>
    <property name="sun.jsse.lib" value="${sun.jsse.root}/lib"/>
    <path id="sun.jsse.classpath">
      <fileset dir="${sun.jsse.lib}">
        <include name="*.jar"/>
      </fileset>
    </path>
    
    <!-- JavaMail -->
    <property name="sun.javamail.root" value="${project.thirdparty.local}/sun/javamail"/>
    <property name="sun.javamail.lib" value="${sun.javamail.root}/lib"/>
    <path id="sun.javamail.classpath">
      <pathelement path="${sun.javamail.lib}/mail.jar"/>
    </path>

    <!-- Log4j -->
    <property name="apache.log4j.root" value="${project.thirdparty.local}/apache/log4j"/>
    <property name="apache.log4j.lib" value="${apache.log4j.root}/lib"/>
    <path id="apache.log4j.classpath">
      <pathelement path="${apache.log4j.lib}/log4j.jar"/>
    </path>

    <!-- Apache Commons -->
    <property name="apache.commons.root" value="${project.thirdparty.local}/apache/commons"/>
    <property name="apache.commons.lib" value="${apache.commons.root}/lib"/>
    <path id="apache.commons.classpath">
      <pathelement path="${apache.commons.lib}/commons-collections.jar"/>
      <pathelement path="${apache.commons.lib}/commons-logging.jar"/>
    </path>

    <!-- EDU.oswego.cs.dl.util.concurrent -->
    <property name="oswego.concurrent.root" value="${project.thirdparty.local}/oswego/concurrent"/>
    <property name="oswego.concurrent.lib" value="${oswego.concurrent.root}/lib"/>
    <path id="oswego.concurrent.classpath">
      <pathelement path="${oswego.concurrent.lib}/concurrent.jar"/>
    </path>

    <!-- JUnit -->
    <property name="junit.junit.root" value="${project.thirdparty.local}/junit/junit"/>
    <property name="junit.junit.lib" value="${junit.junit.root}/lib"/>
    <path id="junit.junit.classpath">
      <pathelement path="${junit.junit.lib}/junit.jar"/>
    </path>

    <!-- JUnit -->
    <property name="sun.servlet.root" value="${project.thirdparty.local}/sun/servlet"/>
    <property name="sun.servlet.lib" value="${sun.servlet.root}/lib"/>
    <path id="sun.servlet.classpath">
      <pathelement path="${sun.servlet.lib}/servlet.jar"/>
    </path>

    <!-- Axis -->
    <property name="apache.axis.root" value="${project.thirdparty.local}/apache/axis"/>
    <property name="apache.axis.lib" value="${apache.axis.root}/lib"/>
    <property name="ibm.wsdl4j.root" value="${project.thirdparty.local}/ibm/wsdl4j"/>
    <property name="ibm.wsdl4j.lib" value="${ibm.wsdl4j.root}/lib"/>
    <property name="ibm.uddi4j.root" value="${project.thirdparty.local}/ibm/uddi4j"/>
    <property name="ibm.uddi4j.lib" value="${ibm.uddi4j.root}/lib"/>
    <path id="apache.axis.classpath">
      <pathelement path="${apache.axis.lib}/axis.jar"/>
      <pathelement path="${apache.axis.lib}/jaxrpc.jar"/>
      <pathelement path="${apache.axis.lib}/saaj.jar"/>
      <pathelement path="${apache.axis.lib}/commons-discovery.jar"/>
      <pathelement path="${apache.commons.lib}/commons-logging.jar"/>
      <fileset dir="${ibm.uddi4j.lib}">
        <include name="**/uddi4j.jar"/>
      </fileset>
    </path>
    <path id="apache.axis.generate.classpath">
      <path refid="sun.jaxp.classpath"/>
      <path refid="apache.axis.classpath"/>
      <pathelement path="${ibm.wsdl4j.lib}/wsdl4j.jar"/>
    </path>


    <!-- The combined library classpath -->
    <path id="library.classpath">
      <path refid="sun.jndi.classpath"/>
      <path refid="sun.jsse.classpath"/>
      <path refid="sun.servlet.classpath"/>
      <path refid="sun.javamail.classpath"/>
      <path refid="sun.jaxp.classpath"/>
      <path refid="apache.log4j.classpath"/>
      <path refid="oswego.concurrent.classpath"/>
      <path refid="junit.junit.classpath"/>
      <path refid="apache.axis.classpath"/>
      <path refid="sun.jsse.classpath"/>
    </path>


  </target>

  <!-- Configure the external modules which this module depends on. -->
  <target name="_configure-modules" unless="configure-modules.disable">

    <property name="project.root.local" value="${project.root}/.."/>

    <!-- J2EE -->
    <property name="jboss.j2ee.root" value="${project.root.local}/j2ee/output"/>
    <property name="jboss.j2ee.lib" value="${jboss.j2ee.root}/lib"/>
    <path id="jboss.j2ee.classpath">
      <pathelement path="${jboss.j2ee.lib}/jboss-j2ee.jar"/>
    </path>

    <!-- Common -->
    <property name="jboss.common.root" value="${project.root.local}/common/output"/>
    <property name="jboss.common.lib" value="${jboss.common.root}/lib"/>
    <path id="jboss.common.classpath">
      <pathelement path="${jboss.common.lib}/jboss-common.jar"/>
    </path>

    <!-- Naming -->
    <property name="jboss.naming.root" value="${project.root.local}/naming/output"/>
    <property name="jboss.naming.lib" value="${jboss.naming.root}/lib"/>
    <path id="jboss.naming.classpath">
      <pathelement path="${jboss.naming.lib}/jnpserver.jar"/>
    </path>

    <!-- System -->
    <property name="jboss.system.root" value="${project.root.local}/system/output"/>
    <property name="jboss.system.lib" value="${jboss.system.root}/lib"/>
    <path id="jboss.system.classpath">
      <pathelement path="${jboss.system.lib}/jboss-system-client.jar"/>
    </path>

    <!-- Server -->
    <property name="jboss.server.root" value="${project.root.local}/server/output"/>
    <property name="jboss.server.lib" value="${jboss.server.root}/lib"/>
    <path id="jboss.server.classpath">
      <pathelement path="${jboss.server.lib}/jboss-client.jar"/>
      <pathelement path="${jboss.server.lib}/jmx-rmi-connector-client.jar"/>
      <pathelement path="${jboss.server.lib}/deploy.jar"/>
    </path>

    <!-- JMX -->
    <property name="jboss.jmx.root" value="${project.root.local}/jmx/output"/>
    <property name="jboss.jmx.lib" value="${jboss.jmx.root}/lib"/>
    <path id="jboss.jmx.classpath">
      <pathelement path="${jboss.jmx.lib}/jboss-jmx.jar"/>
    </path>

    <!-- Messaging -->
    <property name="jboss.messaging.root" value="${project.root.local}/messaging/output"/>
    <property name="jboss.messaging.lib" value="${jboss.messaging.root}/lib"/>
    <path id="jboss.messaging.classpath">
      <pathelement path="${jboss.messaging.lib}/jbossmq.jar"/>
    </path>

    <!-- Security -->
    <property name="jboss.security.root" value="${project.root.local}/security/output"/>
    <property name="jboss.security.lib" value="${jboss.security.root}/lib"/>
    <path id="jboss.security.classpath">
      <pathelement path="${jboss.security.lib}/jbosssx-client.jar"/>
      <pathelement path="${jboss.security.lib}/jbosssx.jar"/>
      <pathelement path="${jboss.security.lib}/jaas.jar"/>
    </path>

     <!-- Cluster -->
     <property name="jboss.cluster.root" value="${project.root.local}/cluster/output"/>
     <property name="jboss.cluster.lib" value="${jboss.cluster.root}/lib"/>
     <path id="jboss.cluster.classpath">
       <pathelement path="${jboss.cluster.lib}/jbossha-client.jar"/>
     </path>

    <!-- Jetty Java Servlets -->
    <property name="jetty.servlet.root" value="${project.root}/jetty/output"/>
    <property name="jetty.servlet.lib" value="${jetty.servlet.root}/lib"/>
    <path id="jetty.servlet.classpath">
      <pathelement path="${jetty.servlet.lib}/javax.servlet.jar"/>
    </path>

     <!-- Axis -->
     <property name="jboss.net.root" value="${project.root.local}/jboss.net/output"/>
     <property name="jboss.net.lib" value="${jboss.net.root}/lib"/>
     <property name="jboss.net.etc" value="${jboss.net.root}/etc"/>
     <path id="jboss.net.classpath">
       <pathelement path="${jboss.net.lib}/jboss-net-client.jar"/>
       <pathelement path="${jboss.net.etc}/"/>
     </path>

     <!-- TestSuite Output -->
     <property name="jboss.test.root" value="${project.root.local}/testsuite/output"/>
     <property name="jboss.test.classes" value="${jboss.test.root}/classes"/>
     <path id="jboss.test.classpath">
       <pathelement path="${jboss.test.classes}/"/>
     </path>

    <!-- The combined dependant module classpath -->
    <path id="dependentmodule.classpath">
      <path refid="jetty.servlet.classpath"/>
      <path refid="jboss.j2ee.classpath"/>
      <path refid="jboss.naming.classpath"/>
      <path refid="jboss.server.classpath"/>
      <path refid="jboss.jmx.classpath"/>
      <path refid="jboss.common.classpath"/>
      <path refid="jboss.system.classpath"/>
      <path refid="jboss.messaging.classpath"/>
      <path refid="jboss.security.classpath"/>
      <path refid="jboss.cluster.classpath"/>
      <path refid="jboss.net.classpath"/>
      <path refid="jboss.test.classpath"/>
      <path refid="jboss.common.classpath"/>
    </path>

    <!-- The classpath required to build classes. -->
    <path id="xdoclet.classpath">
      <fileset dir="${project.thirdparty.local}/xdoclet/xdoclet/lib">
	<include name="*.jar"/>
      </fileset>
      <path refid="jboss.j2ee.classpath"/>
      <pathelement path="${apache.commons.lib}/commons-logging.jar"/>
      <pathelement path="${apache.commons.lib}/commons-collections.jar"/>
      <pathelement path="${basedir}/../output/lib/xdoclet-module-jboss-net.jar"/>
    </path>

  </target>

  <!-- Configure the tasks used by this module. -->
  <target name="_configure-tasks" unless="configure-tasks.disable">
    <!-- Where source files live -->
    <property name="source.java" value="${module.source}/main"/>
    <property name="source.etc" value="${module.source}/etc"/>
    <property name="source.bin" value="${module.source}/bin"/>
    <property name="source.docs" value="${module.source}/docs"/>
    <property name="source.resources" value="${module.source}/resources"/>
    <property name="source.stylesheets" value="${module.source}/stylesheets"/>

    <!-- Where build generated files will go -->
    <property name="build.classes" value="${module.output}/classes"/>
    <property name="build.lib" value="${module.output}/lib"/>
    <property name="build.api" value="${module.output}/api"/>
    <property name="build.etc" value="${module.output}/etc"/>
    <property name="build.bin" value="${module.output}/bin"/>
    <property name="build.docs" value="${module.output}/docs"/>
    <property name="build.resources" value="${module.output}/resources"/>
    <property name="build.stylesheets" value="${module.output}/stylesheets"/>
    <property name="build.reports" value="${module.output}/reports"/>
    <property name="build.testlog" value="${module.output}/log"/>
    <property name="build.gen-src" value="${module.output}/gen-src"/>

    <!-- Install/Release structure -->
    <property name="install.id" value="${module.name}-${module.version}"/>
    <property name="release.id" value="${install.id}"/>
    <property name="install.root" value="${module.output}/${install.id}"/>

    <!-- The combined thirdparty classpath -->
    <path id="thirdparty.classpath">
      <path refid="library.classpath"/>
      <path refid="dependentmodule.classpath"/>
    </path>

    <!-- This module is based on Java 1.2 -->
    <property name="javac.target" value="1.2"/>

    <!-- RMIC should generate stubs compatible with Java 1.2+ -->
    <property name="rmic.stubVersion" value="1.2"/>

    <!-- classpath and local.classpath must have a value using with a path -->
    <property name="classpath" value=""/>
    <property name="local.classpath" value=""/>

    <!-- The classpath required to build classes. -->
    <path id="javac.classpath">
      <pathelement path="${classpath}"/>
      <pathelement path="${local.classpath}"/>
      <path refid="thirdparty.classpath"/>
    </path>

    <!-- The classpath required to build javadocs. -->
    <path id="javadoc.classpath">
      <path refid="javac.classpath"/>
    </path>

    <!-- Packages to include when generating api documentation -->
    <property name="javadoc.packages" value="org.jboss.*"/>

    <!-- Override JUnit defaults -->
    <property name="junit.timeout" value="600000"/> <!-- 10 minutes -->
    <property name="junit.batchtest.todir" value="${build.reports}"/>
    <property name="junit.jvm.options" value="-Ddummy"/>
  </target>


  <!-- ================================================================== -->
  <!-- Compile                                                            -->
  <!-- ================================================================== -->

  <!-- 
     |  Compile everything.
     |
     |  This target should depend on other compile-* targets for each 
     |  different type of compile that needs to be performed, short of
     |  documentation compiles.
    -->
  <target name="compile" 
	  depends="compile-classes, compile-etc, compile-stylesheets, compile-resources, compile-bin"
	  description="Compile all source files."/>

  <!-- Compile all class files -->
  <target name="compile-classes" depends="init">

    <mkdir dir="${build.gen-src}"/>
    
    <!-- call wsdl4j emitter -->
    <java dir="${build.gen-src}" fork="yes" failOnError="true" className="org.apache.axis.wsdl.WSDL2Java">
        <arg line="-s -d Session -Nhttp://net.jboss.org/samples/AddressBook=samples.addr ${source.resources}/addr/wsr/META-INF/AddressBook.wsdl"/> 
	<classpath refid="apache.axis.generate.classpath"/>
    </java>

    <!-- call wsdl4j emitter -->
    <java dir="${build.gen-src}" fork="yes" failOnError="true" className="org.apache.axis.wsdl.WSDL2Java">
        <arg line="-d Session -Nhttp://www.xmethods.net/sd/BabelFishService.wsdl=org.jboss.test.net.external.babelfish ${source.resources}/external/wsr/META-INF/babelfish.wsdl"/> 
	<classpath refid="apache.axis.generate.classpath"/>
    </java>

    <!-- call wsdl4j emitter -->
    <java dir="${build.gen-src}" fork="yes" failOnError="true" className="org.apache.axis.wsdl.WSDL2Java">
        <arg line="-d Session -Nurn:GoogleSearch=org.jboss.test.net.external.google ${source.resources}/external/wsr/META-INF/google.wsdl"/> 
	<classpath refid="apache.axis.generate.classpath"/>
    </java>

    <!-- remove the empty service impl -->
    <delete file="${build.gen-src}/samples/addr/AddressBookSOAPBindingImpl.java"/>

    <taskdef name="webserviceejbdoclet" classname="xdoclet.modules.ejb.EjbDocletTask" classpathref="xdoclet.classpath"/>
    <taskdef name="webservicejmxdoclet" classname="xdoclet.modules.jmx.JMXDocletTask" classpathref="xdoclet.classpath"/>

    <webserviceejbdoclet destdir="${build.gen-src}"
	     ejbspec="2.0"
	     excludedtags="@version,@author">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/net/hello/server/Hello*Bean.java"/>
        <include name="org/jboss/test/net/hello/HelloData.java"/>
      </fileset>
      <entitycmp cmpspec="2.x"/>
      <remoteinterface/>
      <homeinterface/>
      <deploymentdescriptor xmlencoding ="UTF-8"
         destdir="${build.resources}/hello/ejb/META-INF"/>
      <jboss xmlencoding="UTF-8"
         version="3.0"
         destdir="${build.resources}/hello/ejb/META-INF"/>
      <jbossnet webDeploymentName="Hello" 
      	prefix="hello" 
      	destdir="${build.resources}/hello/wsr/META-INF" 
      	targetNameSpace="http://net.jboss.org/hello" />
    </webserviceejbdoclet>

    <webservicejmxdoclet destdir="${build.gen-src}"
	     excludedtags="@version,@author">
      <fileset dir="${source.java}">
        <include name="org/jboss/test/net/jmx/JMXTest.java"/>
      </fileset>
      <mbeaninterface/>
      <jbossnet webDeploymentName="JMXTest" 
      	prefix="jmx" 
      	destdir="${build.resources}/jmx/wsr/META-INF" 
      	targetNameSpace="http://net.jboss.org/jmx" />
    </webservicejmxdoclet>

    <mkdir dir="${build.classes}"/>

    <javac destdir="${build.classes}"
           optimize="${javac.optimize}"
	   target="${javac.target}"
           debug="${javac.debug}"
	   depend="${javac.depend}"
	   verbose="${javac.verbose}"
	   deprecation="${javac.deprecation}"
	   includeAntRuntime="${javac.include.ant.runtime}"
	   includeJavaRuntime="${javac.include.java.runtime}"
	   failonerror="${javac.fail.onerror}">
       <src path="${source.java}"/>
       <src path="${build.gen-src}"/>
       <classpath refid="javac.classpath"/>
       <include name="${javac.includes}"/>
       <exclude name="${javac.excludes}"/>
    </javac>
  </target>

  <!-- Compile resource files -->
  <target name="compile-resources" depends="init">
    <mkdir dir="${build.resources}"/>
    <copy todir="${build.resources}" filtering="no">
      <fileset dir="${source.resources}">
         <include name="**/*"/>
      </fileset>
    </copy>

  </target>

  <!-- Compile stylesheets files -->
  <target name="compile-stylesheets" depends="init">
    <mkdir dir="${build.stylesheets}"/>
    <copy todir="${build.stylesheets}" filtering="yes">
      <fileset dir="${source.stylesheets}">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- Compile etc files (manifests and such) -->
  <target name="compile-etc" depends="init">
    <mkdir dir="${build.etc}"/>
    <copy todir="${build.etc}" filtering="yes">
      <fileset dir="${source.etc}">
         <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- Compile bin scripts -->
  <target name="compile-bin" depends="init">
    <mkdir dir="${build.bin}"/>
    <copy todir="${build.bin}" filtering="yes">
      <fileset dir="${source.bin}">
         <include name="**/*"/>
      </fileset>
    </copy>

    <fixcrlf srcdir="${build.bin}"
	     eol="lf" eof="remove"
	     includes="**/*.sh"/>

    <fixcrlf srcdir="${build.bin}" 
	     eol="crlf" eof="remove"
	     includes="**/*.bat, **/*.cmd"/>

    <chmod perm="+x">
      <fileset dir="${build.bin}">
         <include name="**/*.sh"/>
      </fileset>
    </chmod>
  </target>


  <!-- ================================================================== -->
  <!-- Archives                                                           -->
  <!-- ================================================================== -->

  <!-- 
     | Build all jar files.
   -->

  <target name="jars" description="Builds all jar files."
	  depends="compile,
                   _jars-hello,
                   _jars-addr,
                   _jars-jmx,
                   _jars-axis,
                   _jars-jmx-test,
                   _jars-store,
                   _jars-external">
  </target>

  <!--
     | These targets are meant to be invoked from the 'jars' target.  They
     | do not depend on 'compile' to avoid recursing over those tasks over
     | and over.
     |
     | If you really want to run these outside of 'jars', then besure that
     | the 'compile' targets has be run or you are bound to run into lots of
     | errors.
   -->

  <patternset id="common.test.client.classes">
    <include name="org/jboss/test/util/**"/>
  </patternset>

  <patternset id="common.test.application.classes">
    <include name="org/jboss/test/util/ejb/**"/>
  </patternset>

  <!-- addr test -->
  <target name="_jars-addr">

    <mkdir dir="${build.lib}"/>

    <mkdir dir="${build.resources}/addr/wsr/META-INF"/>

    <copy toFile="${build.resources}/addr/wsr/META-INF/web-service.xml" 
	file="${build.gen-src}/samples/addr/deploy.wsdd"/>
 
    <jar jarfile="${build.lib}/addr.wsr">
      <fileset dir="${build.classes}">
        <include name="samples/**/*.class"/>
      </fileset>
      <fileset dir="${build.resources}/addr/wsr/">
        <include name="**/*"/>
      </fileset>
    </jar>

    <jar jarfile="${build.lib}/addrtest.jar">
      <fileset dir="${build.classes}">
        <include name="samples/**/*.class"/>
	<exclude name="samples/addr/AddressBookSOAPBindingImpl.class"/>
	<exclude name="samples/addr/AddressBookSOAPBindingSkeleton.class"/>
      </fileset>
      <fileset dir="${build.classes}">
        <include name="**/test/net/addr/**/*.class"/>
	<exclude name="**/server/**"/>
      </fileset>
    </jar>

  </target>
  
  <!-- jmx access test -->
  <target name="_jars-jmx-test">
   
    <jar jarFile="${build.lib}/jmx.wsr">
      <fileset dir="${build.resources}/jmx/wsr">
        <include name="**/*"/>
      </fileset>
    </jar>
        
    <jar jarFile="${build.lib}/jmx-test.sar">
      <fileset dir="${build.lib}">
        <include name="jmx.wsr"/>
      </fileset>
      <fileset dir="${build.resources}/jmx/sar/">
        <include name="**/*"/>
      </fileset>
      <fileset dir="${build.classes}">
        <include name="**/test/net/jmx/**"/>
      </fileset>
    </jar>
  </target>


  <!-- hello test -->
  <target name="_jars-hello">

     <mkdir dir="${build.lib}"/>

    <jar jarFile="${build.lib}/hello.wsr">
      <fileset dir="${build.resources}/hello/wsr">
        <include name="**/*"/>
      </fileset>
     </jar>
   
     <jar jarFile="${build.lib}/hellotest.jar">
 	 <fileset dir="${build.classes}">
        	<include name="**/test/net/hello/**"/>
			<exclude name="**/server/**"/>
     </fileset>
      </jar>

    <!-- build hello.jar -->
    <jar jarfile="${build.lib}/hello.jar">
      <fileset dir="${jboss.test.root}/classes">
        <include name="**/test/util/**"/>
      </fileset>
      <fileset dir="${build.classes}">
        <include name="**/test/net/hello/**"/>
        <exclude name="**/Test.*"/>
      </fileset>
      <fileset dir="${build.resources}/hello/ejb/">
        <include name="**/*.xml"/>
      </fileset>
    </jar>

    <jar jarFile="${build.lib}/hello.ear">
 	 <fileset dir="${build.lib}">
        <include name="hello.wsr"/>
        </fileset>
 	 <fileset dir="${build.lib}">
        <include name="hello.jar"/>
        </fileset>
      <fileset dir="${build.resources}/hello/ear">
        <include name="**/*"/>
      </fileset>
     </jar>

  </target>

  <!-- store sample -->
  <target name="_jars-store">

    <mkdir dir="${build.lib}"/>

     <jar jarFile="${build.lib}/store.wsr">
 		<fileset dir="${build.classes}">
        	<include name="**/samples/store/server/**"/>
            <exclude name="**/*Test*"/>
        </fileset>
        <fileset dir="${build.resources}/store/wsr">
         <include name="**/*"/>
        </fileset>
     </jar>
   
     <jar jarFile="${build.lib}/storetest.jar">
 		<fileset dir="${build.classes}">
        	<include name="**/store/**"/>
			<exclude name="**/server/**"/>
        </fileset>
     </jar>

    <!-- build store.jar -->
    <jar jarfile="${build.lib}/store.jar">
      <fileset dir="${build.classes}">
        <include name="**/samples/store/**"/>
		<exclude name="**/*Test*"/>
      </fileset>
      <fileset dir="${build.resources}/store/jar/">
        <include name="**/*.xml"/>
      </fileset>
    </jar>

     <jar jarFile="${build.lib}/store.ear">
 	<fileset dir="${build.lib}">
        <include name="store.wsr"/>
        </fileset>
 	<fileset dir="${build.lib}">
        <include name="store.jar"/>
        </fileset>
      <fileset dir="${build.resources}/store/ear">
        <include name="**/*"/>
      </fileset>
     </jar>

  </target>

  <!-- addr test -->
  <target name="_jars-external">

    <mkdir dir="${build.lib}"/>

    <mkdir dir="${build.resources}/external/wsr/META-INF"/>

    <copy toFile="${build.resources}/external/wsr/META-INF/web-service.xml" 
	file="${source.resources}/external/wsr/META-INF/web-service.xml"/>
 
    <jar jarfile="${build.lib}/external.wsr">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/net/external/google/*.class"/>
        <include name="org/jboss/test/net/external/babelfish/*.class"/>
      </fileset>
      <fileset dir="${build.resources}/external/wsr/">
        <include name="**/*"/>
      </fileset>
    </jar>

    <jar jarfile="${build.lib}/external.jar">
      <fileset dir="${build.classes}">
        <include name="org/jboss/test/net/external/**/*.class"/>
	<exclude name="org/jboss/test/net/external/google/**/*.class"/>
	<exclude name="org/jboss/test/net/external/babelfish/**/*.class"/>
	<exclude name="**/*Test*"/>
      </fileset>
      <fileset dir="${build.resources}/external/jar/">
        <include name="**/*"/>
      </fileset>
    </jar>

    <jar jarfile="${build.lib}/external.ear">
 	<fileset dir="${build.lib}">
        <include name="external.wsr"/>
        </fileset>
 	<fileset dir="${build.lib}">
        <include name="external.jar"/>
        </fileset>
      <fileset dir="${build.resources}/external/ear">
        <include name="**/*"/>
      </fileset>
    </jar>

    <jar jarfile="${build.lib}/externaltest.jar">
 	<fileset dir="${build.classes}">
        <include name="**/external/**"/>
		<exclude name="**/server/**"/>
        </fileset>
    </jar>

  </target>

  <!-- axis test -->
  <target name="_jars-axis">

    <mkdir dir="${build.lib}"/>

     <jar jarFile="${build.lib}/axistest.jar">
 	<fileset dir="${build.classes}">
        	<include name="**/test/net/axis/**"/>
		<exclude name="**/server/**"/>
        </fileset>
      </jar>

  </target>

  <!-- jmx test -->
  <target name="_jars-jmx">

    <mkdir dir="${build.lib}"/>

     <jar jarFile="${build.lib}/jmxtest.jar">
 	<fileset dir="${build.classes}">
        	<include name="**/test/net/jmx/**"/>
		<exclude name="**/server/**"/>
        </fileset>
     </jar>

  </target>

  <!-- ================================================================== -->
  <!-- Documents                                                          -->
  <!-- ================================================================== -->

  <!-- 
     | Create all generated documenation.
     |
     | This target should depend on other docs-* targets for each 
     | different type of docuementation that is to be generated.
   -->

  <target name="docs" description="Builds all documentation."
	  depends="init, docs-api">
  </target>

  <!-- Javadocs is an exception, but provide a docs-api to conform. -->
  <target name="docs-api" depends="docs-javadocs"/>

  <!-- 
     | Check if we need to build javadocs 
     |
     | Javadocs will only be generated if one or more .java source files
     | is newer than the generated index.html.
   -->

  <target name="docs-javadocs-check" depends="init">
    <!-- if index.html is newer than the sources we are up to date -->
    <uptodate property="docs-javadocs.disable"
	      targetfile="${build.api}/index.html">
      <srcfiles dir="${source.java}" includes="**/*.java"/>
    </uptodate>
  </target>	      

  <!-- Generate Javadoc if we are out of date -->
  <target name="docs-javadocs" depends="docs-javadocs-check" unless="docs-javadocs.disable">
    <mkdir dir="${build.api}"/>
    <javadoc packagenames="${javadoc.packages}"
             sourcepath="${source.java}"
             destdir="${build.api}"
             classpathref="javadoc.classpath"
             windowtitle="${javadoc.windowtitle}"
	     splitindex="${javadoc.splitindex}"
             doctitle="${javadoc.doctitle}"
             author="${javadoc.author}"
             version="${javadoc.version}"
             public="${javadoc.public}"
             package="${javadoc.package}"
             protected="${javadoc.protected}"
             private="${javadoc.private}"
             use="${javadoc.use}"
	     verbose="${javadoc.verbose}"> 
      <!-- <group title="??" packages="org.jboss.*"/> -->
    </javadoc>
  </target>

  <target name="javadocs" depends="docs-javadocs"/>


  <!-- ================================================================== -->
  <!-- Install                                                            -->
  <!-- ================================================================== -->

  <target name="install" depends="all">
    <!-- Copy the output directory to the install directory -->
    <mkdir dir="${install.root}"/>
    <copy todir="${install.root}" filtering="no">
      <fileset dir="${module.output}">
         <include name="**/*"/>
         <exclude name="${install.id}/**"/>
      </fileset>
    </copy>
  </target>


  <!-- ================================================================== -->
  <!-- Release                                                            -->
  <!-- ================================================================== -->

  <!-- 
     | Builds a release distribution.
   -->

  <target name="release" depends="install">
    <!-- install handles most of the work -->
  </target>

  <target name="release-zip" depends="release"
	  description="Builds a ZIP release distribution.">
    <zip zipfile="${module.output}/${release.id}.zip">
      <fileset dir="${module.output}">
        <include name="${release.id}/**"/>
      </fileset>
    </zip>
  </target>

  <target name="release-tar" depends="release"
	  description="Builds a TAR release distribution.">
    <tar tarfile="${module.output}/${release.id}.tar" longfile="gnu"
	 basedir="${module.output}"
	 includes="${release.id}/**">
    </tar>
  </target>

  <target name="release-tgz" depends="release-tar"
	  description="Builds a TAR-GZIP release distribution.">
    <gzip src="${module.output}/${release.id}.tar"
	  zipfile="${module.output}/${release.id}.tgz"/>
  </target>

  <target name="release-all" depends="release-zip, release-tgz"
	  description="Builds a distribution for each archive type."/>


  <!-- ================================================================== -->
  <!-- Tests                                                              -->
  <!-- ================================================================== -->

  <!--
     | Run all tests.
   -->

  <target name="tests" description="Execute all tests."
    depends="init, 
             tests-standard-unit, 
             tests-client-unit, 
             tests-security-basic-unit, 
             tests-standard-stress, 
             tests-client-stress, 
             tests-security-basic-stress, 
             tests-report">
  </target>


  <target name="tests-unit" description="Execute all unit tests."
    depends="init, 
             tests-standard-unit, 
             tests-client-unit, 
             tests-security-basic-unit, 
             tests-report"/>
  
  <target name="tests-stress" description="Execute all stress tests."
    depends="init, 
             tests-standard-stress, 
             tests-client-stress, 
             tests-security-basic-stress, 
             tests-report"/>
  
  <!-- 
     | Standard tests that should run successfully against a default JBoss
     | server distribution build.
   -->

  <target name="tests-standard-unit" depends="jars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>

        <junit dir="${module.output}"
	   printsummary="${junit.printsummary}" 
	   haltonerror="${junit.haltonerror}" 
	   haltonfailure="${junit.haltonfailure}" 
	   fork="${junit.fork}"
	   timeout="${junit.timeout}"
	   jvm="${junit.jvm}">

      <jvmarg line="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="log4j.properties" file="${build.resources}/log4j.properties"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}"/>
        <pathelement location="${jboss.net.etc}/"/>
        <path refid="javac.classpath"/>
      </classpath>

      <formatter type="${junit.formatter.type}"
		 usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
		 haltonerror="${junit.batchtest.haltonerror}" 
		 haltonfailure="${junit.batchtest.haltonfailure}" 
		 fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="**/*UnitTestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="tests-standard-stress" depends="jars">

    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
	   printsummary="${junit.printsummary}" 
	   haltonerror="${junit.haltonerror}" 
	   haltonfailure="${junit.haltonfailure}" 
	   fork="${junit.fork}"
	   timeout="${junit.timeout}"
	   jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="log4j.properties" file="${build.resources}/log4j.properties"/>
      <sysproperty key="jbosstest.threadcount" value="${jbosstest.threadcount}"/>
      <sysproperty key="jbosstest.iterationcount" value="${jbosstest.iterationcount}"/>
      <sysproperty key="jbosstest.beancount" value="${jbosstest.beancount}"/>

      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}"/>
        <path refid="javac.classpath"/>
      </classpath>

      <formatter type="${junit.formatter.type}"
		 usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
		 haltonerror="${junit.batchtest.haltonerror}" 
		 haltonfailure="${junit.batchtest.haltonfailure}" 
		 fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="**/*StressTestCase.class"/>

          <!-- do not include the perf or security tests -->
          <!--mq test seems to break things-->
          <exclude name="**/JBossMQPerfStressTestCase.class"/>
          <exclude name="**/test/perf/test/SecurePerfStressTestCase.class"/>
          <exclude name="**/test/security/test/*"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!-- 
     | Tests that need to be run by loading the testcase code from a client
     | jar rather than the build.classes.dir. Typically these tests need to
     | control how classes are loaded.
   -->

  <target name="tests-client-unit" depends="jars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>


    <junit dir="${module.output}"
	   printsummary="${junit.printsummary}" 
	   haltonerror="${junit.haltonerror}" 
	   haltonfailure="${junit.haltonfailure}" 
	   fork="${junit.fork}"
	   timeout="${junit.timeout}"
	   jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="log4j.properties" file="${build.resources}/log4j.properties"/>

      <jvmarg value="-Djava.security.manager"/>
      <sysproperty key="java.security.policy"
		   value="${build.resources}/security/tst.policy"/>
      <sysproperty key="java.security.auth.login.config"
                   value="${build.resources}/security/auth.conf"/>
       
      <classpath>
        <pathelement path="${build.lib}/jrmp-dl-client.jar"/>
        <pathelement location="${build.resources}"/>
        <path refid="javac.classpath"/>
      </classpath>

      <formatter type="${junit.formatter.type}"
		 usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
		 haltonerror="${junit.batchtest.haltonerror}" 
		 haltonfailure="${junit.batchtest.haltonfailure}" 
		 fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="**/test/jrmp/test/DynLoadingUnitTestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="tests-client-stress" depends="jars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
	   printsummary="${junit.printsummary}" 
	   haltonerror="${junit.haltonerror}" 
	   haltonfailure="${junit.haltonfailure}" 
	   fork="${junit.fork}"
	   timeout="${junit.timeout}"
	   jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>

      <jvmarg value="-Djava.security.manager"/>
      <sysproperty key="java.security.policy"
		   value="${build.resources}/security/tst.policy"/>
      <sysproperty key="java.security.auth.login.config"
                   value="${build.resources}/security/auth.conf"/>
      <sysproperty key="log4j.properties" file="${build.resources}/log4j.properties"/>
      <sysproperty key="jbosstest.threadcount" value="${jbosstest.threadcount}"/>
      <sysproperty key="jbosstest.iterationcount" value="${jbosstest.iterationcount}"/>
      <sysproperty key="jbosstest.beancount" value="${jbosstest.beancount}"/>

       
      <classpath>
        <pathelement path="${build.lib}/jrmp-dl-client.jar"/>
        <pathelement location="${build.resources}"/>
        <path refid="javac.classpath"/>
      </classpath>

      <formatter type="${junit.formatter.type}"
		 usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
		 haltonerror="${junit.batchtest.haltonerror}" 
		 haltonfailure="${junit.batchtest.haltonfailure}" 
		 fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <!--there aren't any of these - included for symmetry-->
          <exclude name="**/*"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!-- 
     | Standard security tests that should run successfully against a default
     | JBoss server distribution build.
   -->

  <target name="tests-security-basic-unit" depends="jars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
	   printsummary="${junit.printsummary}" 
	   haltonerror="${junit.haltonerror}" 
	   haltonfailure="${junit.haltonfailure}" 
	   fork="${junit.fork}"
	   timeout="${junit.timeout}"
	   jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>

      <jvmarg value="-Djava.security.manager"/>
      <jvmarg value="-Dsecurity.domain=test-domain"/>
      <sysproperty key="java.security.policy"
		   value="${build.resources}/security/tst.policy"/>
      <sysproperty key="java.security.auth.login.config"
                   value="${build.resources}/security/auth.conf"/>
      <sysproperty key="log4j.properties" file="${build.resources}/log4j.properties"/>
       
      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}/security"/>
        <pathelement location="${build.resources}"/>
        <path refid="javac.classpath"/>
      </classpath>

      <formatter type="${junit.formatter.type}"
		 usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
		 haltonerror="${junit.batchtest.haltonerror}" 
		 haltonfailure="${junit.batchtest.haltonfailure}" 
		 fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="**/test/security/test/LoginContextUnitTestCase.class"/>
          <include name="**/test/security/test/NamespacePermissionsUnitTestCase.class"/>
          <include name="**/test/security/test/PermissionNameUnitTestCase.class"/>
          <include name="**/test/security/test/EJBSpecUnitTestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>


  <target name="tests-security-basic-stress" depends="jars">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
	   printsummary="${junit.printsummary}" 
	   haltonerror="${junit.haltonerror}" 
	   haltonfailure="${junit.haltonfailure}" 
	   fork="${junit.fork}"
	   timeout="${junit.timeout}"
	   jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>

      <jvmarg value="-Djava.security.manager"/>
      <sysproperty key="java.security.policy"
		   value="${build.resources}/security/tst.policy"/>
      <sysproperty key="java.security.auth.login.config"
                   value="${build.resources}/security/auth.conf"/>
      <sysproperty key="log4j.properties" file="${build.resources}/log4j.properties"/>
      <sysproperty key="jbosstest.threadcount" value="${jbosstest.threadcount}"/>
      <sysproperty key="jbosstest.iterationcount" value="${jbosstest.iterationcount}"/>
      <sysproperty key="jbosstest.beancount" value="${jbosstest.beancount}"/>

       
      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}/security"/>
        <pathelement location="${build.resources}"/>
        <path refid="javac.classpath"/>
      </classpath>

      <formatter type="${junit.formatter.type}"
		 usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
		 haltonerror="${junit.batchtest.haltonerror}" 
		 haltonfailure="${junit.batchtest.haltonfailure}" 
		 fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="**/test/perf/test/SecurePerfStressTestCase.class"/>
          <include name="**/test/security/test/*StressTestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>


  <!--
     | Run testcases in a single directory by specifing the test directory
     | name in -Dtest=dirname in tests/dirname/test/**TestCase.class
   -->

  <target name="test" depends="jars" if="test"
	  description="Execute a single test.">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
	   printsummary="${junit.printsummary}" 
	   haltonerror="${junit.haltonerror}" 
	   haltonfailure="${junit.haltonfailure}" 
	   fork="${junit.fork}"
	   timeout="${junit.timeout}"
	   jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="log4j.properties" file="${build.resources}/log4j.properties"/>
      <sysproperty key="jbosstest.threadcount" value="${jbosstest.threadcount}"/>
      <sysproperty key="jbosstest.iterationcount" value="${jbosstest.iterationcount}"/>
      <sysproperty key="jbosstest.beancount" value="${jbosstest.beancount}"/>


      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}"/>
        <path refid="javac.classpath"/>
      </classpath>

      <formatter type="${junit.formatter.type}"
		 usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
		 haltonerror="${junit.batchtest.haltonerror}" 
		 haltonfailure="${junit.batchtest.haltonfailure}" 
		 fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="org/jboss/test/${test}/*/*TestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!--
     | Run a single testcase by specifing the test name in -Dtest=
     | Here you specify the testcase class, not the directory
   -->

  <target name="one-test" depends="jars" if="test"
	  description="Execute a single test.">
    <mkdir dir="${build.reports}"/>
    <mkdir dir="${build.testlog}"/>
    <junit dir="${module.output}"
	   printsummary="${junit.printsummary}" 
	   haltonerror="${junit.haltonerror}" 
	   haltonfailure="${junit.haltonfailure}" 
	   fork="${junit.fork}"
	   timeout="${junit.timeout}"
	   jvm="${junit.jvm}">

      <jvmarg value="${junit.jvm.options}"/>
      <sysproperty key="jbosstest.deploy.dir" file="${build.lib}"/>
      <sysproperty key="log4j.properties" file="${build.resources}/log4j.properties"/>
      <sysproperty key="jbosstest.threadcount" value="${jbosstest.threadcount}"/>
      <sysproperty key="jbosstest.iterationcount" value="${jbosstest.iterationcount}"/>
      <sysproperty key="jbosstest.beancount" value="${jbosstest.beancount}"/>


      <classpath>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.resources}"/>
        <path refid="javac.classpath"/>
      </classpath>

      <formatter type="${junit.formatter.type}"
		 usefile="${junit.formatter.usefile}"/>

      <batchtest todir="${build.reports}"
		 haltonerror="${junit.batchtest.haltonerror}" 
		 haltonfailure="${junit.batchtest.haltonfailure}" 
		 fork="${junit.batchtest.fork}">

        <fileset dir="${build.classes}">
          <include name="org/jboss/test/*/test/${test}.class"/>
          <include name="org/jboss/test/*/perf/${test}.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>


  <!-- 
     | Generates reports from JUnit output.
   -->

  <target name="reports" depends="tests-report" 
	  description="Generates all reports."/>

  <target name="tests-report" depends="tests-report-html, tests-report-text"/>

  <target name="tests-report-html" depends="compile">
    <mkdir dir="${build.reports}/html"/>

    <junitreport todir="${build.reports}">
      <fileset dir="${build.reports}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" 
              todir="${build.reports}/html"
              styledir="${build.stylesheets}"
      />
    </junitreport>
  </target>

  <!-- 
     | this currently spews logs of VariableReference crap, so it is turned
     | off by default.  Once this is fixed, it should be built after
     | tests-report-html
   -->

  <target name="tests-report-text" depends="tests-report-html">
    <mkdir dir="${build.reports}/text"/>

    <tstamp>
       <format property="TIMENOW" pattern="d MMMM yyyy H:m"/>
    </tstamp>

    <style basedir="${build.reports}"
	   destdir="${build.reports}/text"
	   extension=".txt"
	   style="${build.stylesheets}/summary1a.xsl"
	   includes="TESTS-TestSuites.xml">
       <param name="thedate" expression="${TIMENOW}"/>
       <param name="java_version" expression="${java.version}"/>
       <param name="java_vendor" expression="${java.vendor}"/>
       <param name="java_vm_specification_version" expression="${java.vm.specification.version}"/>
       <param name="java_vm_version" expression="${java.vm.version}"/>
       <param name="java_vm_name" expression="${java.vm.name}"/>
       <param name="java_vm_info" expression="${java.vm.info}"/>
       <param name="java_specification_version" expression="${java.specification.version}"/>
       <param name="java_class_version" expression="${java.class.version}"/>
       <param name="os_name" expression="${os.name}"/>
       <param name="os_arch" expression="${os.arch}"/>
       <param name="os_version" expression="${os.version}"/>
    </style>
  </target>


  <!-- ================================================================== -->
  <!-- Cleaning                                                           -->
  <!-- ================================================================== -->

  <!-- Clean up all build output -->
  <target name="clean" depends="init"
	  description="Cleans up most generated files.">
    <delete dir="${module.output}"/>
  </target>

  <!-- Clean up all generated files -->
  <target name="clobber" depends="clean"
	  description="Cleans up all generated files.">
    <delete file="${module.root}/local.properties"/>
    <delete file="${module.root}/build.log"/>
  </target>


  <!-- ================================================================== -->
  <!-- Workspace                                                          -->
  <!-- ================================================================== -->

  <target name="update-project" depends="init">
    <echo>Updating project workspace...</echo>
    <cvs command="update -d" dest="${project.root.local}"/>
  </target>

  <target name="update-module" depends="init">
    <echo>Updating module workspace...</echo>
    <cvs command="update -d" dest="${module.root}"/>
  </target>


  <!-- ================================================================== -->
  <!-- Help                                                               -->
  <!-- ================================================================== -->

  <target name="help" depends="init">
    <projecthelp taskname="help">
      <header><![CDATA[
  The ${module.Name} module.
]]></header>
      <footer><![CDATA[
    -projecthelp for all targets
    -help for full options
]]></footer>
    </projecthelp>
  </target>


  <!-- ================================================================== -->
  <!-- Misc.                                                              -->
  <!-- ================================================================== -->

  <target name="main" depends="most"
	  description="Executes the default target (most)."/>
    
  <target name="all" depends="jars, docs"
	  description="Builds everything."/>

  <target name="most" depends="jars"
	  description="Builds almost everything."/>


</project>
