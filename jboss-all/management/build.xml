<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [
   <!ENTITY buildmagic SYSTEM "../tools/etc/buildmagic/buildmagic.ent">
]>

<!-- ====================================================================== -->
<!--                                                                        -->
<!--  JBoss, the OpenSource J2EE webOS                                      -->
<!--                                                                        -->
<!--  Distributable under LGPL license.                                     -->
<!--  See terms of license at http://www.gnu.org.                           -->
<!--                                                                        -->
<!-- ====================================================================== -->

<!-- $Id: build.xml,v 1.12.2.7 2003/05/18 06:28:32 starksm Exp $ -->

<project default="main" name="JBoss/Management">

  <!-- ================================================================== -->
  <!-- Setup                                                              -->
  <!-- ================================================================== -->

  <!--
     | Include the common Buildmagic elements.
     |
     | This defines several different targets, properties and paths.
     | It also sets up the basic extention tasks amoung other things.
   -->

  &buildmagic;


  <!-- ================================================================== -->
  <!-- Initialization                                                     -->
  <!-- ================================================================== -->

  <!--
     | Initialize the build system.  Must depend on '_buildmagic:init'.  
     | Other targets should depend on 'init' or things will mysteriously fail.
   -->

  <target name="init" unless="init.disable" depends="_buildmagic:init">
  </target>


  <!-- ================================================================== -->
  <!-- Configuration                                                      -->
  <!-- ================================================================== -->

  <!--
     | Configure the build system.  
     |
     | This target is invoked by the Buildmagic initialization logic and 
     | should contain module specific configuration elements.
   -->

  <target name="configure" unless="configure.disable">

    <!-- =================== -->
    <!-- Basic Configuration -->
    <!-- =================== -->

    <!-- Module name(s) & version -->
    <property name="module.name" value="management"/>
    <property name="module.Name" value="JBoss/Management"/>
    <property name="module.version" value="DEV"/>

    <!-- ========= -->
    <!-- Libraries -->
    <!-- ========= -->

    <!-- JUnit -->
    <property name="junit.junit.root" value="${project.thirdparty}/junit/junit"/>
    <property name="junit.junit.lib" value="${junit.junit.root}/lib"/>
    <path id="junit.junit.classpath">
      <pathelement path="${junit.junit.lib}/junit.jar"/>
    </path>

    <!-- Log4j -->
    <property name="apache.log4j.root" value="${project.thirdparty}/apache/log4j"/>
    <property name="apache.log4j.lib" value="${apache.log4j.root}/lib"/>
    <path id="apache.log4j.classpath">
      <pathelement path="${apache.log4j.lib}/log4j.jar"/>
    </path>

    <!-- Apache Crimson (XML/DOM) -->
    <property name="apache.crimson.root" value="${project.thirdparty}/apache/crimson"/>
    <property name="apache.crimson.lib" value="${apache.crimson.root}/lib"/>
    <path id="apache.crimson.classpath">
      <pathelement path="${apache.crimson.lib}/crimson.jar"/>
    </path>

    <!-- Apache Commons -->
    <property name="apache.commons.root" value="${project.thirdparty}/apache/commons"/>
    <property name="apache.commons.lib" value="${apache.commons.root}/lib"/>
    <path id="apache.commons.classpath">
      <pathelement path="${apache.commons.lib}/commons-collections.jar"/>
      <pathelement path="${apache.commons.lib}/commons-logging.jar"/>
    </path>

    <!-- AS: Fix that RemoteMBeanServer is not available in the JBossMX project yet -->
    <property name="tools.root" value="${project.tools}/"/>
    <property name="tools.lib" value="${tools.root}/lib"/>
    <path id="remote-mbeanserver.classpath">
      <pathelement path="${tools.lib}/remote-mbeanserver.jar"/>
    </path>

    <!-- The combined library classpath -->
    <path id="library.classpath">
      <path refid="apache.log4j.classpath"/>
      <path refid="apache.crimson.classpath"/>
      <path refid="apache.commons.classpath"/>
      <path refid="remote-mbeanserver.classpath"/>
    </path>

    <!-- ======= -->
    <!-- Modules -->
    <!-- ======= -->

    <!-- J2EE -->
    <property name="jboss.j2ee.root" value="${project.root}/j2ee/output"/>
    <property name="jboss.j2ee.lib" value="${jboss.j2ee.root}/lib"/>
    <path id="jboss.j2ee.classpath">
      <pathelement path="${jboss.j2ee.lib}/jboss-j2ee.jar"/>
    </path>

    <!-- Common -->
    <property name="jboss.common.root" value="${project.root}/common/output"/>
    <property name="jboss.common.lib" value="${jboss.common.root}/lib"/>
    <path id="jboss.common.classpath">
      <pathelement path="${jboss.common.lib}/jboss-common.jar"/>
    </path>

    <!-- System -->
    <property name="jboss.system.root" value="${project.root}/system/output"/>
    <property name="jboss.system.lib" value="${jboss.system.root}/lib"/>
    <path id="jboss.system.classpath">
      <pathelement path="${jboss.system.lib}/jboss-system.jar"/>
    </path>

    <!-- Server -->
    <property name="jboss.server.root" value="${project.root}/server/output"/>
    <property name="jboss.server.lib" value="${jboss.server.root}/lib"/>
    <path id="jboss.server.classpath">
      <pathelement path="${jboss.server.lib}/jboss.jar"/>
    </path>

    <!-- JCA -->
    <property name="jboss.jca.root" value="${project.root}/connector/output"/>
    <property name="jboss.jca.lib" value="${jboss.jca.root}/lib"/>
    <path id="jboss.jca.classpath">
      <pathelement path="${jboss.jca.lib}/jboss-jca.sar"/>
    </path>

    <!-- JMX -->
    <property name="jboss.jmx.root" value="${project.root}/jmx/output"/>
    <property name="jboss.jmx.lib" value="${jboss.jmx.root}/lib"/>
    <path id="jboss.jmx.classpath">
      <pathelement path="${jboss.jmx.lib}/jboss-jmx.jar"/>
    </path>

    <!-- Clustering -->
    <property name="jboss.cluster.root" value="${project.root}/cluster/output"/>
    <property name="jboss.cluster.lib" value="${jboss.cluster.root}/lib"/>
    <path id="jboss.cluster.classpath">
      <pathelement path="${jboss.cluster.lib}/jbossha.jar"/>
    </path>

    <!-- The combined dependent module classpath -->
    <path id="dependentmodule.classpath">
      <path refid="jboss.j2ee.classpath"/>
      <path refid="jboss.cluster.classpath"/>
      <path refid="jboss.common.classpath"/>
      <path refid="jboss.jca.classpath"/>
      <path refid="jboss.server.classpath"/>
      <path refid="jboss.system.classpath"/>
      <path refid="jboss.jmx.classpath"/>
    </path>

    <!-- ===== -->
    <!-- Tasks -->
    <!-- ===== -->

    <!-- Where source files live -->
    <property name="source.java" value="${module.source}/main"/>
    <property name="source.etc" value="${module.source}/etc"/>

    <!-- Where build generated files will go -->
    <property name="build.reports" value="${module.output}/reports"/>
    <property name="build.gen-src" value="${module.output}/gen-src"/>
    <property name="build.classes" value="${module.output}/classes"/>
    <property name="build.lib" value="${module.output}/lib"/>
    <property name="build.api" value="${module.output}/api"/>
    <property name="build.etc" value="${module.output}/etc"/>
    <property name="build.todo" value="${module.output}/todo"/>

    <!-- Install/Release structure -->
    <property name="install.id" value="${module.name}-${module.version}"/>
    <property name="release.id" value="${install.id}"/>
    <property name="install.root" value="${module.output}/${install.id}"/>

    <!-- The combined thirdparty classpath -->
    <path id="thirdparty.classpath">
      <path refid="library.classpath"/>
      <path refid="dependentmodule.classpath"/>
    </path>

    <!-- This module is based on Java 1.2 -->
    <property name="javac.target" value="1.2"/>

    <!-- classpath and local.classpath must have a value using with a path -->
    <property name="classpath" value=""/>
    <property name="local.classpath" value=""/>

    <!-- The classpath required to build classes. -->
    <path id="javac.classpath">
      <pathelement path="${classpath}"/>
      <pathelement path="${local.classpath}"/>
      <path refid="thirdparty.classpath"/>
    </path>

    <!-- The classpath required to build javadocs. -->
    <path id="javadoc.classpath">
      <path refid="javac.classpath"/>
    </path>

    <!-- Packages to include when generating api documentation -->
    <property name="javadoc.packages" value="org.jboss.*"/>

    <!-- Override JUnit defaults -->
    <property name="junit.timeout" value="240000"/> <!-- 4 minutes -->
    <property name="junit.batchtest.todir" value="${build.reports}"/>
    <property name="junit.jvm.options" value="-Ddummy"/>

    <!-- xdoclet -->
    <path id="xdoclet.task.classpath">
      <path refid="javac.classpath"/>
      <fileset dir="${project.thirdparty}/xdoclet/xdoclet/lib">
        <include name="**/*.jar"/>
      </fileset>
    </path>
    <property name="xdoclet.task.classpath" 
	      refid="xdoclet.task.classpath"/>

    <taskdef name="todo" 
             classname="xdoclet.modules.doc.DocumentDocletTask"
             classpathref="xdoclet.task.classpath"/>
  </target>


  <!-- ================================================================== -->
  <!-- Compile                                                            -->
  <!-- ================================================================== -->

  <!-- 
     | Compile everything.
     |
     | This target should depend on other compile-* targets for each 
     | different type of compile that needs to be performed, short of
     | documentation compiles.
   -->

  <target name="compile" 
	  description="Compile all source files."
	  depends="compile-classes, compile-rmi, compile-etc"/>

  <!-- Compile all class files -->
  <target name="compile-classes" depends="init">
    <mkdir dir="${build.classes}"/>

    <!-- AS: Create Standard MBean interfaces until XMBean is ready -->
    <taskdef name="jmxdoclet" classname="xdoclet.modules.jmx.JMXDocletTask" classpathref="xdoclet.task.classpath"/>
    
    <mkdir dir="${build.gen-src}"/>
    <jmxdoclet 
	     destdir="${build.gen-src}"
	     excludedtags="@version,@author"
    >
      <fileset dir="${source.java}">
        <include name="org/jboss/management/**/*.java"/>
      </fileset>
      <mbeaninterface/>
    </jmxdoclet>
    
    <!-- AS XMBean/XDoclet is not ready right now therefore keep out for now
    <taskdef name="xdoclet" classname="xdoclet.jmx.JMXDocletTask"/>
    
    <xdoclet sourcepath="${source.java}"
	     destdir="${build.gen-src}"
	     classpath="${xdoclet.task.classpath}"
	     excludedtags="@version,@author"
    >
      <fileset dir="${source.java}">
        <include name="org/jboss/management/j2ee/*Target.java"/>
      </fileset>
      <jbossxmbean/>
    </xdoclet>
    -->
    
    <taskdef name="ejbdoclet" classname="xdoclet.modules.ejb.EjbDocletTask" classpathref="xdoclet.task.classpath"/>
    <ejbdoclet
	     destdir="${build.gen-src}"
	     ejbspec="1.1"
	     excludedtags="@version,@author">
      <fileset dir="${source.java}">
        <include name="org/jboss/management/mejb/*Bean.java"/>
        <exclude name="org/jboss/management/mejb/*MBean.java"/>
      </fileset>
      <packageSubstitution packages="ejb" substituteWith="interfaces"/>
      <remoteinterface/>
      <!--AS not clear why now a home interface is generated <homeinterface/> -->
      <session/>
      <deploymentdescriptor xmlencoding="UTF-8" destdir="${build.gen-src}/META-INF"/>
      <jboss xmlencoding="UTF-8" version="3.0" destdir="${build.gen-src}/META-INF"/>
    </ejbdoclet>
    
    <javac destdir="${build.classes}"
           optimize="${javac.optimize}"
           target="${javac.target}"
           debug="${javac.debug}"
	        depend="${javac.depend}"
	        verbose="${javac.verbose}"
	        deprecation="${javac.deprecation}"
	        includeAntRuntime="${javac.include.ant.runtime}"
	        includeJavaRuntime="${javac.include.java.runtime}"
	        failonerror="${javac.fail.onerror}"
    >
      <classpath refid="javac.classpath"/>
      <src path="${source.java}"/>
      <src path="${build.gen-src}"/>
      <include name="${javac.includes}"/>
      <exclude name="${javac.excludes}"/>
    </javac>
  </target>

  <!-- Compile RMI stubs -->
  <target name="compile-rmi" depends="compile-classes">
    <rmic base="${build.classes}"
          sourcebase="${build.classes}"
	       verify="${rmic.verify}"
	       debug="${rmic.debug}"
          stubVersion="${rmic.stubVersion}"
    >
      <classpath refid="javac.classpath"/>
      <include name="${rmic.includes}"/>
      <exclude name="${rmic.excludes}"/>

      <include name="org/jboss/management/mejb/RMIClientNotificationListener.class"/>
    </rmic>
  </target>

  <!-- Compile manifests -->
  <target name="compile-etc" depends="init">
    <mkdir dir="${build.etc}"/>
    <copy todir="${build.etc}" filtering="yes">
      <fileset dir="${source.etc}">
         <include name="**"/>
      </fileset>
    </copy>
  </target>


  <!-- ================================================================== -->
  <!-- Archives                                                           -->
  <!-- ================================================================== -->

  <!-- 
     | Build all jar files.
   -->
  <target name="jars" 
	  description="Builds all jar files."
	  depends="compile">
     
    <mkdir dir="${build.lib}"/>
    
    <!-- JSR-77 specification: jboss-jsr77.jar -->
    <jar jarfile="${build.lib}/jboss-jsr77.jar"
         manifest="${build.etc}/default.mf"
    >
      <fileset dir="${build.classes}">
        <include name="javax/management/j2ee/**"/>
        <exclude name="javax/management/j2ee/Management*.class"/>
      </fileset>
    </jar>
    
    <!-- JSR-77 specification: jboss-jsr77-client.jar -->
    <jar jarfile="${build.lib}/jboss-jsr77-client.jar"
         manifest="${build.etc}/default.mf"
    >
      <fileset dir="${build.classes}">
        <include name="javax/management/j2ee/**"/>
        <include name="org/jboss/management/mejb/*ClientNotificationListener*.class"/>
        <include name="org/jboss/management/mejb/ListenerRegistration.class"/>
        <include name="org/jboss/management/mejb/MEJB.class"/>
      </fileset>
    </jar>
    
    <!-- JSR-77 implementation: jboss-management.jar -->
    <jar jarfile="${build.lib}/jboss-management.jar"
         manifest="${build.etc}/default.mf"
    >
      <fileset dir="${build.classes}">
        <include name="org/jboss/management/j2ee/**"/>
      </fileset>
    </jar>

    <!-- MEJB implementation: ejb-management.jar --> 
    <jar jarfile="${build.lib}/ejb-management.jar"
         manifest="${build.etc}/default.mf"
    >
      <fileset dir="${build.classes}">
        <include name="org/jboss/management/mejb/**"/>
        <include name="javax/management/j2ee/Management*.class"/>
      </fileset>
      <fileset dir="${build.gen-src}">
        <include name="META-INF/**"/>
      </fileset>
    </jar>

    <!-- testsuite-support.jar -->

  </target>

  <!-- ================================================================== -->
  <!-- Install & Release                                                  -->
  <!-- ================================================================== -->

  <target name="install" 
	  description="Install the structure for a release."
	  depends="all, _buildmagic:install:default"/>

  <target name="release" depends="install"/>

  <target name="release-zip" 
	  description="Builds a ZIP distribution."
	  depends="release, _buildmagic:release:zip"/>

  <target name="release-tar" 
	  description="Builds a TAR distribution."
	  depends="release, _buildmagic:release:tar"/>

  <target name="release-tgz" 
	  description="Builds a TAR-GZ distribution."
	  depends="release, _buildmagic:release:tgz"/>

  <target name="release-all"
	  description="Builds a distribution for each archive type."
	  depends="release-zip, release-tgz"/>


  <!-- ================================================================== -->
  <!-- Cleaning                                                           -->
  <!-- ================================================================== -->

  <!-- Clean up all build output -->
  <target name="clean" 
	  description="Cleans up most generated files."
	  depends="_buildmagic:clean">
  </target>

  <!-- Clean up all generated files -->
  <target name="clobber" 
	  description="Cleans up all generated files."
	  depends="_buildmagic:clobber, clean">
  </target>


  <!-- ================================================================== -->
  <!-- Misc.                                                              -->
  <!-- ================================================================== -->

  <target name="main"
	  description="Executes the default target (most)."
	  depends="most"/>
    
  <target name="all"
	  description="Builds everything."
	  depends="jars, docs"/>

  <target name="most" 
	  description="Builds almost everything."
	  depends="jars"/>

  <target name="help" 
          description="Show this help message."
	  depends="_buildmagic:help:standard"/>

</project>
